{"version":3,"sources":["utils.ts","hooks/useAuth.ts","App.tsx","hooks/useFiles.ts","reportWebVitals.ts","index.tsx"],"names":["listFiles","params","a","config","Files","Configuration","basePath","headers","Cookies","get","api","FileOperationsApi","response","tapisLogin","username","password","request","reqCreateToken","grant_type","Authenticator","TokensApi","createToken","result","access_token","Error","useAuth","history","useHistory","from","useLocation","state","pathname","useQuery","initialData","data","error","refetch","useMutation","onSuccess","expires","Date","expires_at","set","replace","mutate","loginStatus","status","loginError","login","logout","remove","push","queryClient","QueryClient","AuthButton","onClick","PrivateRoute","children","rest","token","render","location","to","LoginPage","useState","setUsername","setPassword","value","onChange","e","target","onSubmit","preventDefault","type","PublicPage","ProtectedQueryPage","systemId","path","isLoading","isFetching","map","file","name","ProtectedInfiniteQueryPage","limit","useInfiniteQuery","pageParam","getNextPageParam","lastPage","allPages","length","offset","useInfiniteFilesQuery","fetchNextPage","hasNextPage","pages","page","concatPages","concat","ProtectedSWRPage","useSWR","stringify","stringParams","JSON","parse","isValidating","res","ProtectedInfiniteSWRPage","useSWRInfinite","pageIndex","previousPageData","fullListing","reachedEnd","useFilesSWRInfinite","size","setSize","AuthExample","QueryClientProvider","client","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3e9f82f4.chunk.js","sourcesContent":["import { Files, Authenticator } from '@tapis/tapis-typescript';\nimport Cookies from 'js-cookie';\n\nexport async function listFiles(\n  params: Files.ListFilesRequest\n): Promise<Files.FileListingResponse> {\n  const config = new Files.Configuration({\n    basePath: 'https://tacc.tapis.io',\n    headers: {\n      'x-tapis-token': Cookies.get('swr-token') || ''\n    }\n  });\n  const api = new Files.FileOperationsApi(config);\n  const response = await api.listFiles(params);\n  return response;\n}\n\nexport interface TapisPasswordCredentials {\n  username: string;\n  password: string;\n}\nexport async function tapisLogin({\n  username,\n  password\n}: TapisPasswordCredentials): Promise<Authenticator.NewAccessTokenResponse> {\n\n  const request: Authenticator.CreateTokenRequest = {\n    reqCreateToken: {\n      grant_type: 'password',\n      username,\n      password\n    }\n  };\n\n  const config = new Authenticator.Configuration({\n    basePath: 'https://tacc.tapis.io'\n  });\n  const api = new Authenticator.TokensApi(config);\n\n  const response = await api.createToken(request);\n  if (!response.result?.access_token)\n    throw new Error('Could not parse access token from response.');\n  return response.result.access_token;\n}\n","import { useState } from 'react';\nimport { useQuery, useMutation } from 'react-query';\nimport useSWR from 'swr';\nimport Cookies from 'js-cookie';\nimport { useHistory, useLocation } from 'react-router-dom';\n\nimport { tapisLogin, TapisPasswordCredentials } from '../utils';\n\ninterface StateType {\n  from: {\n    pathname: string;\n  };\n}\n// React-Query auth hook\nexport const useAuth = () => {\n  const history = useHistory();\n  let location = useLocation<StateType>();\n  let { from } = location.state || { from: { pathname: '/' } };\n\n  let { data, error, refetch } = useQuery<string | undefined>(\n    'authcookie',\n    () => Cookies.get('swr-token'),\n    { initialData: Cookies.get('swr-token') }\n  );\n\n  let {\n    mutate,\n    status: loginStatus,\n    error: loginError\n  } = useMutation(tapisLogin, {\n    onSuccess: async data => {\n      const expires = new Date(data.expires_at ?? 0);\n      Cookies.set('swr-token', data.access_token ?? '', { expires });\n      await refetch();\n      history.replace(from);\n    }\n  });\n\n  const logout = async (): Promise<void> => {\n    Cookies.remove('swr-token');\n    await refetch();\n    history.push('/');\n  };\n\n  return { data, error, loginStatus, loginError, login: mutate, logout };\n};\n\n// SWR auth hook\nexport const useAuth_ = () => {\n  const history = useHistory();\n  let location = useLocation<StateType>();\n  let { from } = location.state || { from: { pathname: '/' } };\n  let { data, error, mutate } = useSWR<string | undefined>(\n    'authcookie',\n    () => Cookies.get('swr-token'),\n    { initialData: Cookies.get('swr-token') }\n  );\n\n  const [loginStatus, setLoginStatus] = useState<string>('idle');\n\n  const login = async (creds: TapisPasswordCredentials): Promise<void> => {\n    try {\n      setLoginStatus('loading');\n      const _data = await tapisLogin(creds);\n      const expires = new Date(_data.expires_at ?? 0);\n      Cookies.set('swr-token', _data.access_token ?? '', { expires });\n      await mutate();\n      history.replace(from);\n    } catch (e) {\n      setLoginStatus('error');\n    } finally {\n      setLoginStatus('success');\n    }\n  };\n\n  const logout = async (): Promise<void> => {\n    Cookies.remove('swr-token');\n    await mutate();\n    history.push('/');\n  };\n\n  return {\n    data,\n    error,\n    loginStatus,\n    loginError: loginStatus === 'error',\n    login,\n    logout\n  };\n};\n","import './App.css';\nimport { QueryClient, QueryClientProvider } from 'react-query';\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  Link,\n  Redirect,\n  useLocation,\n  RouteProps\n} from 'react-router-dom';\nimport { Files } from '@tapis/tapis-typescript';\nimport {\n  useFiles,\n  useFilesQuery,\n  useInfiniteFilesQuery,\n  useFilesSWRInfinite\n} from './hooks/useFiles';\nimport { useAuth } from './hooks/useAuth';\nimport { useState } from 'react';\n\n// This example has 3 pages: a public page, a protected\n// page, and a login screen. In order to see the protected\n// page, you must first login. Pretty standard stuff.\n//\n// First, visit the public page. Then, visit the protected\n// page. You're not yet logged in, so you are redirected\n// to the login page. After you login, you are redirected\n// back to the protected page.\n//\n// Notice the URL change each time. If you click the back\n// button at this point, would you expect to go back to the\n// login page? No! You're already logged in. Try it out,\n// and you'll see you go back to the page you visited\n// just *before* logging in, the public page.\nconst queryClient = new QueryClient();\n\n/** For more details on\n * `authContext`, `ProvideAuth`, `useAuth` and `useProvideAuth`\n * refer to: https://usehooks.com/useAuth/\n */\n\nfunction AuthButton() {\n  const { data, error, logout } = useAuth();\n  return data && !error ? (\n    <p>\n      Welcome!\n      <button\n        onClick={() => {\n          logout();\n        }}\n      >\n        Sign out\n      </button>\n    </p>\n  ) : (\n    <p>You are not logged in.</p>\n  );\n}\n\n// A wrapper for <Route> that redirects to the login\n// screen if you're not yet authenticated.\nfunction PrivateRoute({ children, ...rest }: RouteProps) {\n  const { data: token } = useAuth();\n  return (\n    <Route\n      {...rest}\n      render={({ location }: RouteProps) =>\n        token ? (\n          children\n        ) : (\n          <Redirect\n            to={{\n              pathname: '/login',\n              state: { from: location }\n            }}\n          />\n        )\n      }\n    />\n  );\n}\n\ninterface StateType {\n  from: {\n    pathname: string;\n  };\n}\nfunction LoginPage() {\n  let location = useLocation<StateType>();\n  let { from } = location.state || { from: { pathname: '/' } };\n  const { login, loginStatus, loginError } = useAuth();\n  const [username, setUsername] = useState<string>('');\n  const [password, setPassword] = useState<string>('');\n\n  return (\n    <div>\n      {loginError && <p>Error! Try logging in again! </p>}\n      <p>You must log in to view the page at {from.pathname}</p>\n      Username:\n      <input\n        value={username}\n        onChange={e => setUsername(e.target.value)}\n      ></input>\n      <form\n        onSubmit={e => {\n          e.preventDefault();\n          login({ username, password });\n        }}\n      >\n        Password:\n        <input\n          type=\"password\"\n          value={password}\n          onChange={e => setPassword(e.target.value)}\n        ></input>\n      </form>\n      <button onClick={() => login({ username, password })}>\n        Log in (mutate) {loginStatus}\n      </button>\n    </div>\n  );\n}\n\nfunction PublicPage() {\n  return <h3>Public page</h3>;\n}\n\nfunction ProtectedQueryPage() {\n  const { data, error, isLoading, isFetching } = useFilesQuery({\n    systemId: 'tapisv3-storage',\n    path: ''\n  });\n  return (\n    <>\n      <h3>Protected(swr)</h3>\n      {isFetching && <div>is fetching...</div>}\n      {error && <div>error!</div>}\n      {isLoading && <div>loading...</div>}\n      <ul>\n        {data?.result?.map(file => (\n          <li key={file.name}>{file.name}</li>\n        ))}\n      </ul>\n    </>\n  );\n}\n\nfunction ProtectedInfiniteQueryPage() {\n  const { data, isLoading, fetchNextPage, hasNextPage } = useInfiniteFilesQuery(\n    {\n      systemId: 'tapisv3-storage',\n      path: '',\n      limit: 10\n    }\n  );\n\n  const allPages = data?.pages?.map(page => page.result ?? []) ?? [];\n  const concatPages = ([] as Files.FileInfo[]).concat(...allPages);\n  const nextPageCallback = () => {\n    fetchNextPage();\n  };\n\n  return (\n    <>\n      <h3>Protected(swr)</h3>\n      {isLoading && <div>loading...</div>}\n      <ul>\n        {concatPages.map(file => (\n          <li key={file.name}>{file.name}</li>\n        ))}\n      </ul>\n      <button onClick={nextPageCallback}>\n        {hasNextPage ? 'fetch next' : 'no more to fetch'}\n      </button>\n    </>\n  );\n}\n\nfunction ProtectedSWRPage() {\n  const result = useFiles({ systemId: 'tapisv3-storage', path: '' }) || {};\n  return (\n    <>\n      <h3>Protected(swr)</h3>\n      {result.isValidating && <div>validating...</div>}\n      <ul>\n        {result.data?.result?.map(res => (\n          <li key={res.name}>{res.name}</li>\n        ))}\n      </ul>\n    </>\n  );\n}\n\nfunction ProtectedInfiniteSWRPage() {\n  const { size, setSize, fullListing, reachedEnd } = useFilesSWRInfinite({\n    systemId: 'tapisv3-storage',\n    path: '',\n    limit: 10\n  });\n\n  return (\n    <>\n      <h3>Infinite Scroll(swr)</h3>\n      <ul>\n        {fullListing.map(file => (\n          <li key={file.name}>{file.name}</li>\n        ))}\n      </ul>\n      <button onClick={() => setSize(size + 1)}>\n        {reachedEnd ? 'no more to fetch' : 'fetch next'}\n      </button>\n    </>\n  );\n}\n\nexport default function AuthExample() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <Router>\n        <div>\n          <AuthButton />\n\n          <ul>\n            <li>\n              <Link to=\"/public\">Public Page</Link>\n            </li>\n            <li>\n              <Link to=\"/protected\">Protected Page (SWR)</Link>\n            </li>\n            <li>\n              <Link to=\"/protectedinfiniteswr\">\n                Protected Page(SWR infinite scroll)\n              </Link>\n            </li>\n            <li>\n              <Link to=\"/protectedquery\">Protected Page(react-query)</Link>\n            </li>\n            <li>\n              <Link to=\"/protectedinfinitequery\">\n                Protected Page(react-query infinite scroll)\n              </Link>\n            </li>\n          </ul>\n\n          <Switch>\n            <Route path=\"/public\">\n              <PublicPage />\n            </Route>\n            <Route path=\"/login\">\n              <LoginPage />\n            </Route>\n            <PrivateRoute path=\"/protected\">\n              <ProtectedSWRPage />\n            </PrivateRoute>\n            <PrivateRoute path=\"/protectedinfiniteswr\">\n              <ProtectedInfiniteSWRPage />\n            </PrivateRoute>\n            <PrivateRoute path=\"/protectedquery\">\n              <ProtectedQueryPage />\n            </PrivateRoute>\n            <PrivateRoute path=\"/protectedinfinitequery\">\n              <ProtectedInfiniteQueryPage />\n            </PrivateRoute>\n          </Switch>\n        </div>\n      </Router>\n    </QueryClientProvider>\n  );\n}\n","import useSWR, { SWRInfiniteResponse, useSWRInfinite } from 'swr';\nimport { useQuery, useInfiniteQuery } from 'react-query';\nimport { Files } from '@tapis/tapis-typescript';\nimport stringify from 'json-stable-stringify';\nimport { listFiles } from '../utils';\n\nexport function useFiles(params: Files.ListFilesRequest) {\n  let result = useSWR<Files.FileListingResponse, Error>(\n    stringify(params),\n    (stringParams: string) => listFiles(JSON.parse(stringParams))\n  );\n  return result;\n}\n\ninterface UseFilesSWRInfiniteResult extends SWRInfiniteResponse {\n  fullListing: Files.FileInfo[];\n  reachedEnd: boolean;\n}\nexport function useFilesSWRInfinite(\n  params: Files.ListFilesRequest\n): UseFilesSWRInfiniteResult {\n  const limit = params.limit ?? 100;\n\n  const getKey = (\n    pageIndex: number,\n    previousPageData: Files.FileListingResponse | null\n  ): string | null => {\n    if (previousPageData && (previousPageData.result?.length ?? 0) < limit)\n      return null;\n    return stringify({ ...params, offset: pageIndex * limit });\n  };\n\n  const result = useSWRInfinite(getKey, (stringParams: string) =>\n    listFiles(JSON.parse(stringParams))\n  );\n\n  const allPages = result.data?.map(page => page.result ?? []) ?? [];\n  const fullListing = ([] as Files.FileInfo[]).concat(...allPages);\n\n  const reachedEnd = result.data\n    ? (result.data[result.data.length - 1]?.result ?? []).length < limit\n    : false;\n\n  return { ...result, fullListing, reachedEnd };\n}\n\nexport function useFilesQuery(params: Files.ListFilesRequest) {\n  const result = useQuery<Files.FileListingResponse, Error>([params], () =>\n    listFiles(params)\n  );\n  return result;\n}\n\nexport function useInfiniteFilesQuery(params: Files.ListFilesRequest) {\n  const limit = params.limit ?? 100;\n  const result = useInfiniteQuery<Files.FileListingResponse, Error>(\n    [params],\n    ({ pageParam = params }) => listFiles(pageParam),\n    {\n      getNextPageParam: (lastPage, allPages) => {\n        if ((lastPage.result?.length ?? 0) < limit) return undefined;\n        return { ...params, offset: allPages.length * limit };\n      }\n    }\n  );\n\n  return result;\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}